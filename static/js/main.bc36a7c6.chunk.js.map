{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","d","useState","query","setQuery","weather","setWeather","className","current","temp_c","type","placeholder","onChange","event","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","catch","error","location","name","country","Date","getDay","getMonth","getDate","getFullYear","Math","round","condition","text","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAEMA,EAEA,kCAFAA,EAGC,8CAwFQC,MApFf,WAEE,IAgCiBC,EAhCjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAgDF,OACA,qBAAKC,UAAsC,oBAAnBF,EAAQG,SAA4BH,EAAQG,QAAQC,OAAS,GAAM,WAAsB,MAAjH,SACA,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SA9BmB,SAACC,GAEtBT,EAASS,EAAMC,OAAOC,QA6BpBA,MAAOZ,EACPa,WAxDW,SAAAC,GACG,UAAZA,EAAIC,KAGNC,MAAM,GAAD,OAAIpB,EAAJ,eAAmBA,EAAnB,cAAgCI,EAAhC,YACFiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,MAIXG,OAAM,SAAAC,GAAK,OAAIH,QAAQG,MAAMA,WA8CT,oBAApBtB,EAAQuB,UAAuD,oBAAnBvB,EAAQG,QAC7D,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQuB,SAASC,KAA5C,KAAoDxB,EAAQuB,SAASE,WACrE,qBAAKvB,UAAU,OAAf,UAlCaN,EAkCsB,IAAI8B,KA9BlC,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAEzD9B,EAAE+B,UAKD,IATH,CAAC,UAAU,YAAY,QAAQ,QAAQ,MAAM,OAAO,OAC/D,SAAS,YAAY,UAAU,WAAW,YAIzB/B,EAAEgC,YAIO,IAHjBhC,EAAEiC,UAGyB,IAF3BjC,EAAEkC,oBA2BT,sBAAK5B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACG6B,KAAKC,MAAMhC,EAAQG,QAAQC,QAD9B,WAGA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQG,QAAQ8B,UAAUC,aAGnD,SC1EQC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.bc36a7c6.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst api={\n\n  key:'b6d5de82040a490b9c2132136211906',\n  base:'https://api.weatherapi.com/v1/current.json?'\n\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n\n\n      fetch(`${api.base}key=${api.key}&q=${query}&aqi=no`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n         \n         \n\n        }).catch(error => console.error(error));\n    }\n  }\n\n  const test=()=>{\n    console.log('name',weather.location.name);\n    console.log('county',weather.location.country);\n         console.log('temperature',weather.current.temp_c);\n         console.log(weather.current.condition.text)\n  }\n\n  const onSearchChange = (event) =>{\n    //console.log(event.target.value)\n    setQuery(event.target.value);\n  }\n\nconst dateBuilder=(d)=>{\n\n  let months=[\"january\",\"Februvary\",\"March\",\"April\",\"May\",\"June\",\"July\",\n  \"August\",\"September\",\"October\",\"November\",\"December\"];\n  let days=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\n\n  let day=days[d.getDay()];\n  let month=months[d.getMonth()];\n  let date=d.getDate();\n  let year=d.getFullYear();\n\n  let res=day + ' '+ month +' '+date +' '+year;\n\n  return res;\n}\n\n\nreturn (\n<div className={(typeof weather.current != \"undefined\") ? ((weather.current.temp_c > 16) ? 'app warm' : 'app') : 'app'}>\n<main>\n  <div className=\"search-box\">\n    <input \n      type=\"text\"\n      className=\"search-bar\"\n      placeholder=\"Search...\"\n      onChange={ onSearchChange }\n      value={query}\n      onKeyPress={search}\n    />\n  </div>\n  {(typeof weather.location != \"undefined\") && (typeof weather.current != \"undefined\") ? (\n  <div>\n    <div className=\"location-box\">\n      <div className=\"location\">{weather.location.name}, {weather.location.country}</div>\n      <div className=\"date\">{dateBuilder(new Date())}</div>\n    </div>\n    <div className=\"weather-box\">\n      <div className=\"temp\">\n        {Math.round(weather.current.temp_c)}Â°c\n      </div>\n      <div className=\"weather\">{weather.current.condition.text}</div>\n    </div>\n  </div>\n  ) : ('')}\n</main>\n</div>\n);\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}